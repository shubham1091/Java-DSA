Git installation 
    Git command line tool
    Git bash (Terminal program)

# we can also use Git gui insted of command line tool but here we are going to learn command line tool

Initial Setup 
    git config --global user.name "my name" 
    git config --global user.email "my email"

to check 
    git config user.name 
    git config user.email

git three stage Architecture 
                            local operations

    [working directory]         [staging area]          [git directory/repositoty]
            |                         |                             |
            |                         |                             |
            |<<<<================================================== |
            |                         |    (checkout the project)   |
            |=====================>>>>|                             |
            |      (stage files)      |                             |
            |                         |=========================>>>>|
            |                         |           (commit)          |

            
Tracking our first git pproject
    first check if the folder we are in is a git repository or not for that we can use the command (git status)
    if it is not a git repository then make it a git repository for that use command (git init)
    and now if we run git status command we can see it has become a git repository
    now we can use (git add --a or git add . )command to add all files to the staging area 
    after that use (git commit -m "your massage") to commit the changes
    we can use (git log )command to see previous commit

    
    # if you want to stage only one file use (git add fileName.excetention)
    # if you want to remove git repository use (rm -rf .git) *warnint use it care fully
    
Cloning a Remote Git Repository from GitHub
to clone a git repo first copy the url of that git repo then 
use  (git clone YourUrl)  
use  (git clone URL  folderName) to clone repo and make a new folder for that

Git : File Status Lifecycle
    [Untracked]    [unmodified]    [modifyed]    [staged]
        |               |=============>>|            |
        |=============>>| edit the file |            |
        |  add the file |               |            |
        |               |               |==========>>|
        |<<=============|               | stage file |
        |  remove file  |               |            |
        |               |<<==========================|
        |               |             commit         |

Ignoring files in git (.gitignore)
    To ignore unnecessary files we need to make (.gitignore) file for that
    and now we can add all the names of the files that we don't want to Tracking
    #{we can also ignore specific file excetention for that use (*.excetention) to do that}
    #{to ignore whole folder (directoryName/)}
    #{to ignore folder but not inside folder (/directoryName/)}
    #{we can also provide paths}

Showing changes between commits/staging area & working directory (git diff)
    when we have a file in staging area and modifyed we can use (git diff )command to show changes
    # (git diff --staged)
    use this to compare previous commit and staged files

Skipping the staging area 
    if our files are previously commited and we don't hava any new files we can skip staging area by using
    (git commit -a -m "massage") command 
    #but be careful with if we have some new files they are not going to be commit 
    
Moving and Renaming files in git
    use (git rm file.excetention) to remove files if we remove otherwise we also need to stage that changes
    use (git mv prevname.excetention changedname.excetention) to rename files
    if we have some file that we were previously Tracking and now we ignore that file and try to check status 
    it will show as modified  
    to Untracke that file we need to
    
Viewing & changing commits in git
    use (git log -p ) to see detailed commit 
    we can also use (git log -p N) to see previous N commits in detailed
    use (git log --stat) to see summery of commits
    use (git log --since=n.day)to see previous n days of commits you can also change day to month or week etc.

unstaging & unmodifying files in git
    