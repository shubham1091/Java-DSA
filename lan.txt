there are three types of programming languages
1=>procedural language
2=>functional language
3=>object oriented language

procedural:- 
-specifies a series of well-structured steps and procedures to compose a program.
-contains a systematic order of statements, functions and commands to complete a task.

functional:- 
-Writing a program only in pure functions i.e. never modify variables, but only create new ones as an output.
-Used in situations where we have to perform lots of different operations on the same set of data, like ML.
-First class functions

Object Oriented:-
-Revolves around objects 
-Code + Data = Object 
-Devloped to make it easier to develop, debug and maintain software.


Static vs Dynamic languages =>

Static:-
-Perform type checking at compile time
-Errors will show at compile time
-Declare datatype before you use it
-More control

Dynamic:-
-Peform type checking at runtime
-Error might not show till program is run
-No need to declare datatype of variables
-Saves time in writing code but might give error at runtime


Flowcharts:-

start/stop ----> ovel ◯

input/output ----> paelelogram ▱

processing ----> rectangle ▭

condition ----> dimond ◇

flow direction ----> aero

Take a name and output hello name.

            start
              |
              ↡
            input name
              |
              ↡
            output hello name
              |
              ↡
             End

pseudocode:-

Input a number and print whether it is prime or not.

start
imput num 
c = 2
while c < numl:
    if num % c = 0;
        output "not prime"
    c=c+1    
end while
output "prime"
exit


How java code executes 

[.java file (human readanle)]
{this is the source code}
    compiler(entire file)

[.class file (byte code)]
{ -this code will not directly run on a system 
  -we need JVM to rum this 
  -Reason why Java is platform independent
}
    interpreter (line by line)

[Machine code (0 and 1)]


More about platform independence
-It means that byte code can run on all operating systems.
-we need to convert source code to machine code so computer can understand 
-compiler helps in doing this by turning it into executable code
-this executable code is a set of instructions for the computer-After compiling c/c++ code we get .exe file which is platform dependent 
-In java we get bytecode ,JVM converts this to machine code
-Java is platform-independent but JVM is platform dependent


JDK vs JRE vs JVM vs JIT ===>


--------------------------------------------------
JDK = JRE + Developemet Tools                     |
(Java Developement Kit)                           |
|      --------------------------------------------
|     | JRE = JVM + Library Classes               |
|     | (Java Runtime Enviroment)                 |
|     |     ---------------------------------------
|     |    |    Java Virtual Machine (JVM)        |
|     |    |        ------------------------------
|     |    |        |   JIT (Just-in-time)        |
|_____|____|_______________________________________    



JDK
-Provides environment to develop and run the java program 
-It is a pakage that includes:
    1 development tools - to provide an environment to develop your programming
    2 JRE - to execute your program 
    3 a compiler - javac
    4 archiver - jar
    5 docs generator - javadoc
    6 interpreter / loader


JRE
-It is an installation pakage that provides enviroment to only run the program 
-It consist of:
    1 Deployment technologies
    2 User interface toolkits 
    3 Integration libraries
    4 Base librariew
    5 JVM
-After we get the  .class file the next things happen at runtime;
    1 Class loader loads all classes needed to execute the program
    2 JVM sends code to Byte code verifier to check the format of code

 compile time ==>

 .java file ----javac(compilation)--->.class file

JVM Execution
Intepreter:
-Line by line Execution
-when one method is called many times, it will interpret again and again
JIT:
-those methods that are repeated, JIT provides direct machine code so re-interpretation is not required.
-makes execution faster 
Garbage collector


Runtime ==>

class Loader --> Byte code verifer --> Interpreter --> Runtime --> Hardware

(How JVM works) class loader
-Loading:
    -reads .class file and generate binary data
    -an object of this class is created in heap
-Linking 
    -JVM verifies the .class file 
    -allocates memory for class variables & default values
    -replace symbolic references from the type with direct references
-Initialization
    all static variables are assigned with their values defined in the code and static block
JVM contains the stack and heap memory allocations